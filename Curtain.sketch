// Stepper motor control from Serial port
// Send in format: direction speed stepcount with blank between values.
// for direction 'l' for left and 'r' for right

#include <EEPROM.h> //Needed to access the eeprom read write functions

// Constant variables
int input1 = 2;
int input2 = 3;
int input3 = 4;
int input4 = 5;

const int DIRECTION_LEFT = 108;  // 'l' char
const int DIRECTION_RIGHT = 114; // 'r' char

const int buttonLeft = 8;      // the number of the pushbutton pin
const int buttonRight = 7;     // the number of the pushbutton pin

const int CMD_MOVE = 109;         // 'm' char
const int CMD_SET_POSITION = 115; // 's' char
const int CMD_GET_POSITION = 112; // 'p' char

int Position = 0;



void setup()
{
  Serial.begin(9600);
  
  pinMode(input1,OUTPUT);
  pinMode(input2,OUTPUT);
  pinMode(input3,OUTPUT);
  pinMode(input4,OUTPUT);
  
  pinMode(buttonLeft, INPUT);  
  pinMode(buttonRight, INPUT);  

  digitalWrite(buttonLeft, HIGH);  
  digitalWrite(buttonRight, HIGH);  
     
  // Load current position from EEPROM
  Position = EEPROMReadInt(0);
}

void loop()
{
  int cmd = 0;
  int buttonState = 0;
  
  if (Serial.available() > 0)
  {
    cmd = Serial.read();
  }
  
  switch(cmd)
  {
    case CMD_MOVE:
      readMovement();
      break;
    
    case CMD_SET_POSITION:
      readSetPosition();
      break;
      
    case CMD_GET_POSITION:
      Serial.println(Position,DEC);
      break;
  }
  
  // Check if button pressed:
  buttonState = digitalRead(buttonLeft);
  if (buttonState == LOW) {     
     moveClockwise(4, 1 ) ;
  } 
  buttonState = digitalRead(buttonRight);
  if (buttonState == LOW) {     
     moveCounterClockwise(4, 1 ) ;
  } 
  //delay(1000);
}


void readSetPosition()
{
  Serial.read();
  Position =   Serial.parseInt();
  EEPROMWriteInt(0, Position);
}


void readMovement()
{ 
  int dir = 0;
  int stepperSpeed = 0;
  int stepCount = 0;
  
  Serial.read();
  dir =  Serial.parseInt();
  Serial.read();
  stepperSpeed = Serial.parseInt();
  Serial.read();
  stepCount = Serial.parseInt(); 

  switch(dir)
  {
    case DIRECTION_LEFT:
      moveClockwise(stepperSpeed, stepCount ) ;
      break;
      
    case DIRECTION_RIGHT:
      moveCounterClockwise(stepperSpeed, stepCount ) ;
      break;
  }
}


//This function will write a 2 byte integer to the eeprom at the specified address and address + 1
void EEPROMWriteInt(int p_address, int p_value)
{
  byte lowByte = ((p_value >> 0) & 0xFF);
  byte highByte = ((p_value >> 8) & 0xFF);

  EEPROM.write(p_address, lowByte);
  EEPROM.write(p_address + 1, highByte);
}

//This function will read a 2 byte integer from the eeprom at the specified address and address + 1
unsigned int EEPROMReadInt(int p_address)
{
  byte lowByte = EEPROM.read(p_address);
  byte highByte = EEPROM.read(p_address + 1);

  return ((lowByte << 0) & 0xFF) + ((highByte << 8) & 0xFF00);
}


void moveClockwise(int mySpeed, int stepCount ) 
{
  /*if (Serial.available() > 0)
  {
    Serial.read();
    return;
  }*/
  for(int i = 0; i < stepCount; i++)
  {
    //4th step
    digitalWrite(input1,LOW);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);
    
    //3rd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,LOW);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //2nd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,LOW);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //1st step
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,LOW);
    delay(mySpeed);  //small delay between each step of 10ms
    
    Position++;
    if(Position > 1050)
    {
      Position = 1050;
      return;
    }
    EEPROMWriteInt(0, Position);
  }
}

void moveCounterClockwise(int mySpeed, int stepCount ) 
{
  /*if (Serial.available() > 0)
  {
    Serial.read();
    return;
  }*/
  for(int i = 0; i < stepCount; i++)
  {
    //1st step
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,LOW);
    delay(mySpeed);  //small delay between each step of 10ms
    
      //2nd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,LOW);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
      //3rd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,LOW);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //4th step
    
    digitalWrite(input1,LOW);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);
    
    Position--;
    if(Position < 0)
    {
      Position = 0;
      return;
    }
    
    EEPROMWriteInt(0, Position);
  }
}


/*
void moveClockwise(int mySpeed, int stepCount ) 
{
  if (Serial.available() > 0)
  {
    Serial.read();
    return;
  }
  for(int i = 0; i < stepCount; i++)
  {
    //4th step
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //3rd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //2nd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);
    
    //1st step
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);  //small delay between each step of 10ms
    
    Position++;
    EEPROMWriteInt(0, Position);
  }
}

void moveCounterClockwise(int mySpeed, int stepCount ) 
{
  if (Serial.available() > 0)
  {
    Serial.read();
    return;
  }
  for(int i = 0; i < stepCount; i++)
  {
    //1st step
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);  //small delay between each step of 10ms
    
      //2nd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,LOW);
    digitalWrite(input4,HIGH);
    delay(mySpeed);
    
      //3rd step
    digitalWrite(input1,LOW);
    digitalWrite(input2,HIGH);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    //4th step
    
    digitalWrite(input1,HIGH);
    digitalWrite(input2,LOW);
    digitalWrite(input3,HIGH);
    digitalWrite(input4,LOW);
    delay(mySpeed);
    
    Position--;
    EEPROMWriteInt(0, Position);
  }
}*/
